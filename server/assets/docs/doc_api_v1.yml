openapi: '3.0.2'
info:
  title: URL shortener
  version: '1.0'
  description: REST API for URL shortener
  contact:
    name: Fabien Bellanger
    email: fabien.bellanger@apitic.com
  license:
    name: MIT
    url: https://mit-license.org/
servers:
  - url: http://localhost:{port}/api/v1
    description: Local server
    variables:
      port:
        enum:
          - "3000"
        default: "3000"
security:
  - bearerAuth: []
paths:
  /login:
    post:
      description: Authenticate a user
      tags:
        - "Authentication"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/userAuth'
            example:
              username: test@gmail.com
              password: "00000000"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userLogin'
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '500':
            $ref: "#/components/responses/InternalServerError"
  /register:  
    post:
      summary: ""
      description: User creation
      tags:
        - "Users"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '500':
            $ref: "#/components/responses/InternalServerError"
  /users:
    get:
      summary: ""
      description: List all users
      tags:
        - "Users"
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/User'
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '500':
            $ref: "#/components/responses/InternalServerError"
  /users/{id}:
    get:
      summary: ""
      description: Get one user
      tags:
        - "Users"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '404':
            $ref: "#/components/responses/NotFound"
        '500':
            $ref: "#/components/responses/InternalServerError"
    put:
      summary: ""
      description: Update user
      tags:
        - "Users"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '404':
            $ref: "#/components/responses/NotFound"
        '500':
            $ref: "#/components/responses/InternalServerError"
    delete:
      summary: ""
      description: Delete a user
      tags:
        - "Users"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: User ID
      responses:
        '204':
          description: No Content
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '404':
            $ref: "#/components/responses/NotFound"
        '500':
            $ref: "#/components/responses/InternalServerError"
  /forgotten-password/{email}:
    post:
      summary: ""
      description: Forgotten password request
      tags:
        - "Users"
      parameters:
        - in: path
          name: email
          schema:
            type: string
            format: email
          required: true
          description: User email
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResets'
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '404':
            $ref: "#/components/responses/NotFound"
        '405':
            $ref: "#/components/responses/MethodNotAllowed"
        '500':
            $ref: "#/components/responses/InternalServerError"
  /update-password/{token}:
    patch:
      summary: ""
      description: Set a new user password
      tags:
        - "Users"
      parameters:
        - in: path
          name: token
          schema:
            type: string
            format: uuid
          required: true
          description: Token to reset password
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdatePassword"
            example:
              password: "11111111"
      responses:
        '200':
          description: OK
        '400':
            $ref: "#/components/responses/BadRequest"
        '401':
            $ref: "#/components/responses/Unauthorized"
        '404':
            $ref: "#/components/responses/NotFound"
        '405':
            $ref: "#/components/responses/MethodNotAllowed"
        '500':
            $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    Unauthorized:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    BadRequest:
      description: Invalid parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
        text/plain:
          schema:
            type: string
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
    MethodNotAllowed:
      description: Method Not Allowed
    InternalServerError:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResponseError'
  schemas:
    ResponseError:
      type: object
      properties:
        code:
          type: integer
          minimum: 100
          maximum: 527
        message:
          type: string
      required:
        - code
        - message
    userAuth:
      type: object
      properties:
        username:
          type: string
          format: email
        password:
          type: string
          minLength: 8
      required:
        - username
        - password
    userLogin:
      type: object
      properties:
        id:
          type: string
          format: uuid
        lastname:
          type: string
        firstname:
          type: string
        username:
          type: string
          format: email
        token:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        expired_at:
          type: string
          format: date-time
      required:
        - id
        - lastname
        - firstname
        - username
        - token
        - created_at
        - updated_at
        - expired_at
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        lastname:
          type: string
        firstname:
          type: string
        username:
          type: string
          format: email
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      required:
        - id
        - lastname
        - firstname
        - username
        - created_at
        - updated_at
    UserForm:
      type: object
      properties:
        lastname:
          type: string
        firstname:
          type: string
        username:
          type: string
          format: email
        password:
          type: string
          minLength: 8
      required:
        - lastname
        - firstname
        - username
        - password
    PasswordResets:
      type: object
      properties:
        user_id:
          type: string
          format: uuid
        token:
          type: string
        expired_at:
          type: string
          format: date-time
      required:
        - user_id
        - token
        - expired_at
    UserUpdatePassword:
      type: object
      properties:
        password:
          type: string
          minLength: 8
      required:
        - password